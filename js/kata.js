// Функция для преобразования римских чисел в арабские
function romanToArabic(roman) {
    // Объект для соответствия римских цифр их арабским значениям
    const romanNumerals = { I: 1, V: 5, X: 10, L: 50, C: 100, D: 500, M: 1000 };
    let arabic = 0; // Переменная для хранения результата
    let prevValue = 0; // Переменная для хранения предыдущего значения

    // Перебираем строку с римским числом с конца
    for (let i = roman.length - 1; i >= 0; i--) {
        const currentValue = romanNumerals[roman[i]]; // Текущее значение
        if (currentValue < prevValue) {
            // Если текущее значение меньше предыдущего, вычитаем его из общей суммы
            arabic -= currentValue;
        } else {
            // Иначе прибавляем к общей сумме
            arabic += currentValue;
        }
        prevValue = currentValue; // Обновляем предыдущее значение
    }
    return arabic; // Возвращаем результат
}

// Эта функция принимает строку с римским числом и преобразует его в арабское число.
// Она работает, перебирая каждый символ строки справа налево и сравнивая его значение
// с предыдущим символом, чтобы определить, нужно ли добавить или вычесть его значение
// из общего результата.

// Функция для преобразования арабских чисел в римские
function arabicToRoman(arabic) {
    // Если число меньше или равно нулю, возвращаем пустую строку
    if (arabic <= 0) {
        return '';
    }

    // Массив для соответствия арабских чисел и римских цифр
    const romanNumerals = [
        ['M', 1000], ['CM', 900], ['D', 500], ['CD', 400],
        ['C', 100], ['XC', 90], ['L', 50], ['XL', 40],
        ['X', 10], ['IX', 9], ['V', 5], ['IV', 4], ['I', 1]
    ];
    let roman = ''; // Переменная для хранения результата

    // Перебираем массив с соответствиями
    for (const [numeral, value] of romanNumerals) {
        while (arabic >= value) {
            // Пока арабское число больше или равно значению из массива
            roman += numeral; // Добавляем римскую цифру к результату
            arabic -= value; // Уменьшаем арабское число
        }
    }
    return roman; // Возвращаем результат
}

// Эта функция принимает арабское число и преобразует его в римское число.
// Она использует жадный алгоритм, выбирая самую большую возможную римскую цифру
// из массива соответствий и вычитая её значение из арабского числа до тех пор,
// пока не останется ничего для преобразования.

// Функция для проверки, является ли строка римским числом
function isRoman(num) {
    // Регулярное выражение для проверки римских чисел
    return /^[IVXLCDM]+$/.test(num);
}

// Эта функция проверяет, соответствует ли введенная строка формату римского числа.
// Она использует регулярное выражение, чтобы убедиться, что строка содержит только
// символы римских цифр и ничего больше.

// Функция для проверки, находится ли число в допустимом диапазоне
function isValidRange(arabic) {
    // Диапазон от 1 до 10 включительно
    return arabic >= 1 && arabic <= 10;
}

// Эта функция проверяет, находится ли арабское число в допустимом диапазоне от 1 до 10.
// Это важно, потому что наш калькулятор ограничен работой только с числами в этом диапазоне.

// Основная функция калькулятора
function calculator(string) {
    // Разделяем входную строку на части
    const parts = string.split(' ');
    // Если частей не три, выбрасываем ошибку
    if (parts.length !== 3) {
        throw new Error('Некорректный формат строки');
    }

    let num1, num2, result, isRomanNumeral;

    // Проверяем, являются ли оба операнда римскими числами
    if (isRoman(parts[0]) && isRoman(parts[2])) {
        // Преобразуем римские числа в арабские
        num1 = romanToArabic(parts[0]);
        num2 = romanToArabic(parts[2]);
        // Проверяем, находятся ли числа в допустимом диапазоне
        if (!isValidRange(num1) || !isValidRange(num2)) {
            throw new Error('Операнды должны быть в диапазоне от I до X');
        }
        isRomanNumeral = true;
    } else if (!isNaN(parts[0]) && !isNaN(parts[2])) {
        // Иначе преобразуем строки в арабские числа
        num1 = parseInt(parts[0], 10);
        num2 = parseInt(parts[2], 10);
        // Проверяем, находятся ли числа в допустимом диапазоне
        if (!isValidRange(num1) || !isValidRange(num2)) {
            throw new Error('Операнды должны быть в диапазоне от 1 до 10');
        }
        isRomanNumeral = false;
    } else {
        // Если операнды не соответствуют условиям, выбрасываем ошибку
        throw new Error('Оба операнда должны быть либо арабскими, либо римскими числами');
    }

    // Выполняем арифметическую операцию в зависимости от оператора
    switch (parts[1]) {
        case '+':
            result = num1 + num2;
            break;
        case '-':
            result = num1 - num2;
            break;
        case '*':
            result = num1 * num2;
            break;
        case '/':
            // Для деления округляем результат в меньшую сторону
            result = Math.floor(num1 / num2);
            break;
        default:
            // Если оператор не поддерживается, выбрасываем ошибку
            throw new Error('Неподдерживаемая операция');
    }

    // Возвращаем результат в зависимости от типа операндов
    if (isRomanNumeral) {
        // Для римских чисел преобразуем результат обратно в римское число
        return result > 0 ? arabicToRoman(result) : '';
    } else {
        // Для арабских чисел возвращаем строковое представление числа
        return result.toString();
    }
}

// Основная функция `calculator` принимает строку с арифметической операцией и возвращает результат.
// Она разделяет строку на операнды и оператор, проверяет их на соответствие условиям (римские или арабские числа),
// выполняет арифметическую операцию и возвращает результат в соответствующем формате.
